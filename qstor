#!/usr/bin/env python

# -*- coding: utf-8 -*-

import argparse
import json
import logging
import os
import sys
import io
import functools

if sys.version_info[0] < 3:
    input = raw_input  # noqa:F821
    to_unicode = unicode  # noqa:F821
else:
    to_unicode = str


# Setup Logging
logging.basicConfig(
    level=logging.WARNING,
    format="%(name)-12s: %(levelname)-8s %(message)s",
)

logger = logging.getLogger('qstor')


# Dirs
HOME_DIR = os.path.expanduser("~")
CONFIG_DIR = os.path.join(HOME_DIR, ".qstor")
CONFIG = os.path.join(CONFIG_DIR, "config.toml")
STORE = os.path.join(CONFIG_DIR, "store.json")


# Internal Functions
def _safe_write(data):
    with io.open(STORE, 'w', encoding='utf8') as outfile:
        data_str = json.dumps(
            data,
            indent=4,
            separators=(',', ': '),
        )
        outfile.write(to_unicode(data_str))


def _access_store(fn):
    """Add a `data` positional arg to the decorated function.
    """
    @functools.wraps(fn)
    def wrapped(*args, **kwargs):
        if not os.path.exists(STORE):
            _safe_write({})

        try:
            with open(STORE) as file_:
                data = json.load(file_)
        except ValueError:
            logger.warning(
                "Unable to access the `store` located at `%s`, the file may be corrupted! "
                "To recreate it anew, run the `qstor reset` command!",
                STORE,
            )
            sys.exit(1)

        return fn(data, *args, **kwargs)

    return wrapped


# Top-Level Functions
@_access_store
def ls(data):
    LS_DIVIDER = "-" * 40

    for key, value in data.items():
        print("\n")
        print(key + ":\n" + LS_DIVIDER)
        print(value)

    sys.exit()


@_access_store
def get(data, key):
    value = data.get(key)

    if value is None:
        print('\nNothing found')
        sys.exit(1)

    print("\n" + value)
    sys.exit()


@_access_store
def put(data, key, value):
    if key is None:
        key = input('Key: ')

    if not key:
        logger.warning("Bad Key!")
        sys.exit(1)

    if value is None:
        print('Value:\n')
        value = ''
        current_value = None
        previous_value = None
        while True:
            if current_value == '' and previous_value == '':
                break

            current_value = input()
            value += current_value
            value += '\n'
            previous_value = current_value

        # Remove `\n\n` from the value.
        value = value[:-2]

        if not value:
            logger.warning("Bad Value!")
            sys.exit(1)

    data[key] = value.strip()

    _safe_write(data)

    print("STORED")
    sys.exit()


@_access_store
def delete(data, key):
    try:
        value = data.pop(key)
    except KeyError:
        print('\nNothing found')
        sys.exit(1)

    _safe_write(data)

    print("The following value (with key `" + key + "`) was popped:\n\n" + value)
    sys.exit()


def reset():
    _safe_write({})
    sys.exit()


# Parser
parser = argparse.ArgumentParser(
    description="A super mini-utility to store and retrieve random snippets in your terminal!",
)
parser.set_defaults(fn=parser.print_help)

sub_parsers = parser.add_subparsers(metavar='command')

ls_parser = sub_parsers.add_parser(
    'ls',
    help='See all stored snippets.',
)
ls_parser.set_defaults(fn=ls)

get_parser = sub_parsers.add_parser(
    'get',
    help="Retrieve a snippet by it's key",
)
get_parser.add_argument('key')
get_parser.set_defaults(fn=get)

put_parser = sub_parsers.add_parser(
    'put',
    help="Store a new key-value pair.",
)
put_parser.add_argument(
    '--key',
    help="Non-interactive way to set a key.",
)
put_parser.add_argument(
    '--value',
    help="Non-interactive way to set a value.",
)
put_parser.set_defaults(fn=put)

delete_parser = sub_parsers.add_parser(
    'del',
    help="Delete a snippet by it's key",
)
delete_parser.add_argument('key')
delete_parser.set_defaults(fn=delete)

reset_parser = sub_parsers.add_parser(
    'reset',
    help='Re-initialize the data-store. This will ERASE any currently stored data, use with care!',
)
reset_parser.set_defaults(fn=reset)


if __name__ == "__main__":
    if not os.path.isdir(CONFIG_DIR):
        os.mkdir(CONFIG_DIR)

    args = vars(parser.parse_args())

    fn = args.pop('fn')

    fn(**args)
