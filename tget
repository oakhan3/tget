#!/usr/bin/env python

# -*- coding: utf-8 -*-

import argparse
import json
import os
import sys
import io
import functools

if sys.version_info[0] < 3:
    input = raw_input  # noqa:F821
    to_unicode = unicode  # noqa:F821
else:
    to_unicode = str


# Dirs
HOME_DIR = os.path.expanduser("~")
CONFIG_DIR = os.path.join(HOME_DIR, ".tget")
CONFIG = os.path.join(CONFIG_DIR, "config.toml")
STORE = os.path.join(CONFIG_DIR, "store.json")


# Internal Functions
def _safe_write(data):
    with io.open(STORE, "w", encoding="utf8") as outfile:
        data_str = json.dumps(
            data,
            indent=4,
            separators=(",", ": "),
        )
        outfile.write(to_unicode(data_str))


def _access_store(fn):
    """Add a `data` positional arg to the decorated function.
    """
    @functools.wraps(fn)
    def wrapped(*args, **kwargs):
        if not os.path.exists(STORE):
            _safe_write({})

        try:
            with open(STORE) as file_:
                data = json.load(file_)
        except ValueError:
            print("\nUnable to access the `store` - the file may be corrupted!")
            print("To recreate it anew, run the `tg reset` command.")
            print("Store location: {}".format(STORE))
            sys.exit(1)

        return fn(data, *args, **kwargs)

    return wrapped


# Top-Level Functions
@_access_store
def ls(data):
    DIVIDER = "-" * 40

    for key, value in data.items():
        print("\n" + key + "\n" + DIVIDER)
        print(value)


@_access_store
def get(data, key):
    value = data.get(key)

    if value is None:
        print("\nNothing found")
        sys.exit(1)

    print("\n" + value)


@_access_store
def put(data, key, value):
    if key is None:
        key = input("Key: ")

    if not key:
        print("\nBad Key!")
        sys.exit(1)

    if value is None:
        print("Value: (Hit <ENTER> twice to end input)\n")
        value = ""
        current_value = None
        previous_value = None
        while True:
            if current_value == " and previous_value == ":
                break

            current_value = input()
            value += current_value
            value += "\n"
            previous_value = current_value

        # Remove `\n\n` from the value.
        value = value[:-2]

    if not value:
        print("Bad Value!")
        sys.exit(1)

    data[key] = value.strip()

    _safe_write(data)

    print("STORED")


@_access_store
def delete(data, key):
    try:
        value = data.pop(key)
    except KeyError:
        print("\nNothing found")
        sys.exit(1)

    _safe_write(data)

    print("\nThe following value (with key `" + key + "`) was deleted:\n\n" + value)


def reset():
    _safe_write({})


# Parser
parser = argparse.ArgumentParser(
    description="A super mini-utility to store and retrieve random snippets in your terminal!",
)
sub_parsers = parser.add_subparsers(metavar="command")


ls_parser = sub_parsers.add_parser(
    "ls",
    help="See all stored snippets.",
)
ls_parser.set_defaults(fn=ls)


get_parser = sub_parsers.add_parser(
    "get",
    help="Retrieve a snippet by it's key",
)
get_parser.add_argument("key")
get_parser.set_defaults(fn=get)


put_parser = sub_parsers.add_parser(
    "put",
    help="Store a new key-value pair.",
)
put_parser.add_argument(
    "--key",
    help="Non-interactive way to set a key.",
)
put_parser.add_argument(
    "--value",
    help="Non-interactive way to set a value.",
)
put_parser.set_defaults(fn=put)


delete_parser = sub_parsers.add_parser(
    "del",
    help="Delete a snippet by it's key",
)
delete_parser.add_argument("key")
delete_parser.set_defaults(fn=delete)


reset_parser = sub_parsers.add_parser(
    "reset",
    help="Re-initialize the data-store. This will ERASE any currently stored data, use with care!",
)
reset_parser.set_defaults(fn=reset)


if __name__ == "__main__":
    if not os.path.isdir(CONFIG_DIR):
        os.mkdir(CONFIG_DIR)

    args = sys.argv[1:]

    if not len(args):
        parser.print_help()
        sys.exit(1)

    if args[0] in {
        "ls",
        "get",
        "put",
        "del",
        "reset",
        "-h",
        "--help",
    }:
        main_args = vars(parser.parse_args(args))
        fn = main_args.pop("fn")
        fn(**main_args)
        sys.exit()

    key = " ".join(args)
    get(key)
    sys.exit()
